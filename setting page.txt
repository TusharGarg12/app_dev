package com.example.settingspage

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonColors
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.ExposedDropdownMenuDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Slider
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.settingspage.ui.theme.SettingsPageTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            SettingsPageTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    SettingsPage(
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsPage( modifier: Modifier = Modifier) {
    val setFontSize by remember { mutableStateOf(50.sp) }
    var showDialog1 by remember { mutableStateOf(false) }
    var showDialog2 by remember { mutableStateOf(false) }
    var showDialog3 by remember { mutableStateOf(false) }
    var showDialog4 by remember { mutableStateOf(false) }
    var wifi by remember { mutableStateOf("off") }
    var blu by remember { mutableStateOf("off") }
    var hot by remember { mutableStateOf("Select") }
    var call by remember { mutableStateOf("off") }
    var expanded by remember { mutableStateOf(false) }
    var expanded2 by remember { mutableStateOf(false) }
   // val options = listOf("Option 1", "Option 2", "Option 3")
    var sliderValue by remember { mutableStateOf(50f) }
    var current_account by remember { mutableStateOf("Guest") }
    var nota by remember { mutableStateOf("on") }
    var dis by remember { mutableStateOf("on") }
    var language by remember { mutableStateOf("English") }
    Column (modifier = Modifier.fillMaxSize().padding(0.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
    )
    {
        Spacer(modifier = Modifier.height(180.dp))
        Text("Settings",
            fontSize=setFontSize,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.fillMaxWidth().padding(50.dp),


        )
        Column (modifier = Modifier.fillMaxSize().padding(),
            horizontalAlignment = Alignment.CenterHorizontally,
        )
        {
            Button(onClick = {showDialog1=true},
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Transparent, // Background color
                    contentColor = Color.Black,   // Text color
                    disabledContainerColor = Color.Gray,  // Background color when disabled
                    disabledContentColor = Color.LightGray // Text color when disabled
                ),) {
                OutlinedTextField(value = "General Settings", onValueChange = {},
                    modifier = Modifier.fillMaxWidth().padding(8.dp).border(width = 0.dp,
                        color = Color.DarkGray, ), enabled = false,
                    textStyle = TextStyle(
                        // Set bold font
                        fontSize = 18.sp,              // Set desired font size
                        color = Color.White,           // Explicitly set the text color to dark
                        textAlign = TextAlign.Start    // Optional: Align text
                    )
                )
            }
            Button(onClick = {showDialog2=true},
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Transparent, // Background color
                    contentColor = Color.Black,   // Text color
                    disabledContainerColor = Color.Gray,  // Background color when disabled
                    disabledContentColor = Color.LightGray // Text color when disabled
                ),) {
                OutlinedTextField(value = "Manage account", onValueChange = {},
                    modifier = Modifier.fillMaxWidth().padding(8.dp).border(width = 0.dp,
                        color = Color.DarkGray, ), enabled = false,
                    textStyle = TextStyle(
                        //fontWeight = FontWeight.Bold,  // Set bold font
                        fontSize = 18.sp,              // Set desired font size
                        color = Color.White,           // Explicitly set the text color to dark
                        textAlign = TextAlign.Start    // Optional: Align text
                    )
                )
            }

            Button(onClick = {showDialog3=true},
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Transparent, // Background color
                    contentColor = Color.Black,   // Text color
                    disabledContainerColor = Color.Gray,  // Background color when disabled
                    disabledContentColor = Color.LightGray // Text color when disabled
                ),) {
                OutlinedTextField(value = "Other Settings", onValueChange = {},
                    modifier = Modifier.fillMaxWidth().padding(8.dp).border(width = 0.dp,
                        color = Color.DarkGray, ),enabled=false,
                    textStyle = TextStyle(
                        //fontWeight = FontWeight.Bold,  // Set bold font
                        fontSize = 18.sp,              // Set desired font size
                        color = Color.White,           // Explicitly set the text color to dark
                        textAlign = TextAlign.Start    // Optional: Align text
                    )
                )
            }
            Button(onClick = {showDialog4=true},
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Transparent, // Background color
                    contentColor = Color.Black,   // Text color
                    disabledContainerColor = Color.Gray,  // Background color when disabled
                    disabledContentColor = Color.LightGray // Text color when disabled
                ),) {
                OutlinedTextField(value = "About", onValueChange = {},
                    modifier = Modifier.fillMaxWidth().padding(8.dp).border(width = 0.dp,
                        color = Color.DarkGray, ), enabled = false,
                    textStyle = TextStyle(
                        // fontWeight = FontWeight.Bold,  // Set bold font
                        fontSize = 18.sp,              // Set desired font size
                        color = Color.White,           // Explicitly set the text color to dark
                        textAlign = TextAlign.Start    // Optional: Align text
                    )
                )
            }

        }
    }
    if(showDialog1){
        AlertDialog(onDismissRequest = {showDialog1=false},
            confirmButton = {
                Column(modifier = Modifier.fillMaxSize().padding(8.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center)
                {
                    Text("General", fontSize = 28.sp,
                        modifier = Modifier.padding(8.dp))
                    Spacer(modifier = Modifier.height(10.dp))
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {

                        Text("break Reminder", fontSize = 15.sp,
                            )
                        Button(onClick = {
                            if (wifi == "off") {
                                wifi = "on"
                            } else wifi = "off"
                        }) {
                            Text(wifi)
                        }

                    }
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text("Sound and Vibrations", fontSize = 15.sp)
                        Button(onClick = {
                            if (blu == "off") {
                                blu = "on"
                            } else blu = "off"
                        }) {
                            Text(blu)
                        }
                    }
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text("Region", fontSize = 15.sp)
                        Box(){
                            Button(onClick = {expanded=true}) {
                                Text("$hot")
                                Icon(Icons.Default.ArrowDropDown,
                                    contentDescription = "Arrow Down")
                            }
                            DropdownMenu(expanded =expanded , onDismissRequest = {expanded=false}) {
                                DropdownMenuItem(
                                    text = { Text("America") },
                                    onClick = {expanded=false
                                    hot="America"}
                                )
                                DropdownMenuItem(
                                    text = { Text("India") },
                                    onClick = {
                                        expanded=false
                                        hot="India"
                                    }
                                )
                                DropdownMenuItem(
                                    text = { Text("England") },
                                    onClick = {
                                        expanded=false
                                        hot="England"
                                    }
                                )
                                DropdownMenuItem(
                                    text = { Text("la la land") },
                                    onClick = {
                                        expanded=false
                                        hot="la la land"
                                    }
                                )
                            }
                        }
                    }
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ){
                        Text("Brightness", fontSize = 15.sp)
                        Slider(
                            value = sliderValue,
                            onValueChange = { sliderValue = it },  // Update the slider value as the user slides
                            valueRange = 0f..100f,  // Range from 0 to 100
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 16.dp)
                        )
                    }
                }
            }
        )
    }
    if(showDialog2){
        AlertDialog(onDismissRequest = {showDialog2=false},
            confirmButton ={
                Column (modifier = Modifier.fillMaxSize().padding(8.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.CenterHorizontally
                )
                {
                    Row (modifier = Modifier.fillMaxWidth().padding(8.dp),
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.SpaceBetween
                    )
                    {
                        Text("Manage Account", fontSize = 16.sp)
                            Box(modifier = Modifier.background(color = Color.White,
                                shape = RoundedCornerShape(20))){
                                //Text("Manage Account")
                                Button(onClick = {expanded2=true})
                                {
                                    Icon(Icons.Default.Add,
                                        contentDescription = "Add")
                                }
                            }

                    }
                    Box(modifier = Modifier.fillMaxWidth().padding(8.dp)){
                        OutlinedTextField(value = current_account, onValueChange = {}, enabled = false,
                            textStyle = TextStyle(
                                // fontWeight = FontWeight.Bold,  // Set bold font
                                fontSize = 18.sp,              // Set desired font size
                                color = Color.White,           // Explicitly set the text color to dark
                                textAlign = TextAlign.Start    // Optional: Align text
                            ))
                    }
                }
            })
    }
    if(expanded2){
        AlertDialog(onDismissRequest = {expanded2=false}, confirmButton = {
            Column (
                modifier = Modifier.fillMaxWidth().padding(8.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ){
                Button(onClick = {current_account="TUSHAR GARG"
                                 expanded2=false},
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.Transparent, // Background color
                        contentColor = Color.Black,   // Text color
                        disabledContainerColor = Color.Gray,  // Background color when disabled
                        disabledContentColor = Color.LightGray // Text color when disabled
                    ),) {
                    OutlinedTextField(value = "TUSHAR GARG", onValueChange = {},
                        modifier = Modifier.fillMaxWidth().padding(8.dp).border(width = 0.dp,
                            color = Color.DarkGray, ), enabled = false,
                        textStyle = TextStyle(
                            // fontWeight = FontWeight.Bold,  // Set bold font
                            fontSize = 18.sp,              // Set desired font size
                            color = Color.White,           // Explicitly set the text color to dark
                            textAlign = TextAlign.Start    // Optional: Align text
                        )
                    )
                }
                Button(onClick = {current_account="IEC2023059"
                                 expanded2=false},
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.Transparent, // Background color
                        contentColor = Color.Black,   // Text color
                        disabledContainerColor = Color.Gray,  // Background color when disabled
                        disabledContentColor = Color.LightGray // Text color when disabled
                    ),) {
                    OutlinedTextField(value = "IEC2023059", onValueChange = {},
                        modifier = Modifier.fillMaxWidth().padding(8.dp).border(width = 0.dp,
                            color = Color.DarkGray, ), enabled = false,
                        textStyle = TextStyle(
                            // fontWeight = FontWeight.Bold,  // Set bold font
                            fontSize = 18.sp,              // Set desired font size
                            color = Color.White,           // Explicitly set the text color to dark
                            textAlign = TextAlign.Start    // Optional: Align text
                        )
                    )
                }
                Button(onClick = {current_account="GUEST"
                                 expanded2=false},
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.Transparent, // Background color
                        contentColor = Color.Black,   // Text color
                        disabledContainerColor = Color.Gray,  // Background color when disabled
                        disabledContentColor = Color.LightGray // Text color when disabled
                    ),) {
                    OutlinedTextField(value = "GUEST", onValueChange = {},
                        modifier = Modifier.fillMaxWidth().padding(8.dp).border(width = 0.dp,
                            color = Color.DarkGray, ), enabled = false,
                        textStyle = TextStyle(
                            // fontWeight = FontWeight.Bold,  // Set bold font
                            fontSize = 18.sp,              // Set desired font size
                            color = Color.White,           // Explicitly set the text color to dark
                            textAlign = TextAlign.Start    // Optional: Align text
                        )
                    )
                }
            }

        })
    }
    if(showDialog3){
        AlertDialog(onDismissRequest = {showDialog3=false},
            confirmButton = {
                Column(modifier = Modifier.fillMaxSize().padding(8.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center)
                {
                    Text("Other Settings", fontSize = 28.sp,
                        modifier = Modifier.padding(8.dp))
                    Spacer(modifier = Modifier.height(10.dp))
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {

                        Text("Notifications", fontSize = 15.sp,
                        )
                        Button(onClick = {
                            if (nota == "off") {
                                nota = "on"
                            } else nota = "off"
                        }) {
                            Text(nota)
                        }

                    }
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text("Discover", fontSize = 15.sp)
                        Button(onClick = {
                            if (dis == "off") {
                                dis = "on"
                            } else dis = "off"
                        }) {
                            Text(dis)
                        }
                    }
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text("Language", fontSize = 15.sp)
                        Box(){
                            Button(onClick = {expanded=true}) {
                                Text("$language")
                                Icon(Icons.Default.ArrowDropDown,
                                    contentDescription = "Arrow Down")
                            }
                            DropdownMenu(expanded =expanded , onDismissRequest = {expanded=false}) {
                                DropdownMenuItem(
                                    text = { Text("English") },
                                    onClick = {expanded=false
                                        language="English"}
                                )
                                DropdownMenuItem(
                                    text = { Text("Hindi") },
                                    onClick = {
                                        expanded=false
                                        language="Hindi"
                                    }
                                )
                                DropdownMenuItem(
                                    text = { Text("American") },
                                    onClick = {
                                        expanded=false
                                        language="American"
                                    }
                                )
                                DropdownMenuItem(
                                    text = { Text("Dutch") },
                                    onClick = {
                                        expanded=false
                                        language="Dutch"
                                    }
                                )
                            }
                        }
                    }
                    Row(
                        modifier = Modifier.fillMaxWidth().padding(8.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ){
                        Text("Sensitivity", fontSize = 15.sp)
                        Slider(
                            value = sliderValue,
                            onValueChange = { sliderValue = it },  // Update the slider value as the user slides
                            valueRange = 0f..100f,  // Range from 0 to 100
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 16.dp)
                        )
                    }
                }
            }
        )
    }
    if(showDialog4){
        AlertDialog(onDismissRequest = {showDialog4=false},
            confirmButton ={
                Column(
                    modifier = Modifier.fillMaxSize().padding(8.dp),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {

                        Text("Version", fontSize = 18.sp)
                        Text("2k24", fontSize = 12.sp)

                }
            })
    }


}

@Preview(showBackground = true)
@Composable
fun SettingsPagePreview() {
    SettingsPageTheme {
        SettingsPage()
    }
}